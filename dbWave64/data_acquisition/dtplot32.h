#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CDTPlot32 wrapper class

class CDTPlot32 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CDTPlot32)
public:
	const CLSID& GetClsid()
	{
		static const CLSID clsid
			= {0x81820e40, 0x3a07, 0x11cf, {0xb6, 0x97, 0x0, 0x20, 0xaf, 0xeb, 0x10, 0xa0}};
		return clsid;
	}

	BOOL Create(LPCTSTR lpszClassName,
	            LPCTSTR lpszWindowName, DWORD dw_style,
	            const RECT& rect,
	            CWnd* pParentWnd, UINT nID,
	            CCreateContext* pContext = nullptr) override
	{
		return CreateControl(GetClsid(), lpszWindowName, dw_style, rect, pParentWnd, nID);
	}

	BOOL Create(LPCTSTR lpszWindowName, DWORD dw_style,
	            const RECT& rect, CWnd* pParentWnd, UINT nID,
	            CFile* pPersist = nullptr, BOOL bStorage = FALSE,
	            BSTR bstrLicKey = nullptr)
	{
		return CreateControl(GetClsid(), lpszWindowName, dw_style, rect, pParentWnd, nID,
		                     pPersist, bStorage, bstrLicKey);
	}

	// Attributes
public:
	unsigned long GetBackColor();
	void SetBackColor(unsigned long);
	unsigned long GetForeColor();
	void SetForeColor(unsigned long);
	float GetYMin();
	void SetYMin(float);
	float GetYMax();
	void SetYMax(float);
	float GetXStart();
	void SetXStart(float);
	float GetXLength();
	void SetXLength(float);
	long GetLineStyle();
	void SetLineStyle(long);
	short GetLineWidth();
	void SetLineWidth(short);
	long GetDataType();
	void SetDataType(long);
	short GetNumChannels();
	void SetNumChannels(short);
	float GetXScale();
	void SetXScale(float);
	unsigned long GetMarkerColor();
	void SetMarkerColor(unsigned long);
	BOOL GetMarkerV1On();
	void SetMarkerV1On(BOOL);
	float GetMarkerV1Pos();
	void SetMarkerV1Pos(float);
	BOOL GetMarkerV2On();
	void SetMarkerV2On(BOOL);
	float GetMarkerV2Pos();
	void SetMarkerV2Pos(float);
	BOOL GetMarkerH1On();
	void SetMarkerH1On(BOOL);
	float GetMarkerH1Pos();
	void SetMarkerH1Pos(float);
	BOOL GetMarkerH2On();
	void SetMarkerH2On(BOOL);
	float GetMarkerH2Pos();
	void SetMarkerH2Pos(float);
	unsigned long GetGridColor();
	void SetGridColor(unsigned long);
	long GetGridStyle();
	void SetGridStyle(long);
	BOOL GetGridAutoScale();
	void SetGridAutoScale(BOOL);
	BOOL GetGridXOn();
	void SetGridXOn(BOOL);
	float GetGridXStart();
	void SetGridXStart(float);
	float GetGridXSpacing();
	void SetGridXSpacing(float);
	BOOL GetGridYOn();
	void SetGridYOn(BOOL);
	float GetGridYStart();
	void SetGridYStart(float);
	float GetGridYSpacing();
	void SetGridYSpacing(float);
	BOOL GetUpdateMode();
	void SetUpdateMode(BOOL);
	BOOL GetXAutoScale();
	void SetXAutoScale(BOOL);
	BOOL GetYAutoScale();
	void SetYAutoScale(BOOL);
	BOOL GetStripChartMode();
	void SetStripChartMode(BOOL);
	long GetStripChartSize();
	void SetStripChartSize(long);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	long GetBuffer();
	void SetBuffer(long);
	float GetMouseXPos();
	void SetMouseXPos(float);
	float GetMouseYPos();
	void SetMouseYPos(float);
	short GetBorderStyle();
	void SetBorderStyle(short);
	float GetSinglePoint();
	void SetSinglePoint(float);
	BOOL GetForceRepaint();
	void SetForceRepaint(BOOL);

	// Operations
public:
	unsigned long GetPalette(short index);
	void SetPalette(short index, unsigned long newValue);
	float GetMarkerV1Data(short index);
	void SetMarkerV1Data(short index, float newValue);
	float GetMarkerV2Data(short index);
	void SetMarkerV2Data(short index, float newValue);
	void AboutBox();
};
